pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node16'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    stages {
        stage('clean workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/Ashfaque-9x/a-youtube-clone-app.git'
            }
        }
        stage("Sonarqube Analysis") {
            steps {
                withSonarQubeEnv('sonarqube-server') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Wesley-youtube \
                    -Dsonar.projectKey=Wesley-youtube'''
                }
            }
        }
        stage("Quality Gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonarqube-token'
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                sh "npm install"
            }
        }
        stage('TRIVY FS SCAN') {
            steps {
                sh "trivy fs . > trivyfs.txt"
            }
        }
        stage("Docker Build & Push"){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'dockerhub', toolName: 'docker'){   
                        sh "docker build -t youtube-clone ."
                        sh "docker tag youtube-clone bulawesley/wesley-youtube:${BUILD_NUMBER}.1 "
                        sh "docker push bulawesley/wesley-youtube:${BUILD_NUMBER}.1 "
                    }
                }
            }
        }
        stage("TRIVY Image Scan"){
            steps{
                sh "trivy image bulawesley/wesley-youtube:${BUILD_NUMBER}.1 > trivyimage.txt" 
            }
        }
        stage('Deploy to Container') {
            steps {
                sh 'docker run -d --name WESLEY-youtube -p 3000:3000 bulawesley/wesley-youtube:${BUILD_NUMBER}.1'
                sh 'docker ps -a'
            }
        
        }
        /*
        stage('Deploy to Kubernetes'){
            steps{
                script{
                    dir('Kubernetes') {
                        withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'kubernetes', namespace: '', restrictKubeConfigAccess: false, serverUrl: '') {
                            sh 'kubectl delete --all pods'
                            sh 'kubectl apply -f deployment.yml'
                            sh 'kubectl apply -f service.yml'
                        }   
                    }
                }
            }
        }
        */
    }
    post {
        success {
            script {
                slackSend color: '#2EB67D',
                    channel: 'general',
                    message: "*WESLEY-YOUTUBE Build Status*" +
                        "\n Project Name: WESLEY-YOUTUBE" +
                        "\n Job Name: ${env.JOB_NAME}" +
                        "\n Build number: ${currentBuild.displayName}" +
                        "\n Build Status : *SUCCESS*" +
                        "\n Build url : ${env.BUILD_URL}"
            }
        }
    }
}
